# vim: set filetype=tmux
set-option -g display-time 2000

# Get notification of activity in another window
setw -g monitor-activity on
set -g visual-activity on

# Shortcut for toggling monitor-activity and monitor-silence
bind-key g setw monitor-activity

# Prevent wrapping of search
setw -g wrap-search off

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Use Alt-Shift J/K to move through windows
bind -n M-J next-window
bind -n M-K previous-window

# Synchronise panes
bind a set-window-option synchronize-panes

# Sessions
bind P source-file ~/.tmux/pdev

# Use ` as the prefix key and C-q as the secondary prefix key
unbind C-b
set -g prefix `
bind ` send-prefix
unbind C-q
set -g prefix2 C-q
bind C-q send-prefix -2

# look good
set -g default-terminal "screen-256color"

# fix scrolling
set -g terminal-overrides 'xterm*:smcup@:rmcup@,alacritty:RGB,xterm-256color:RGB,gnome*:RGB,screen-256color:RGB'

# Clear scrollback buffer
bind C-l clear-history \; display-message "Cleared scrollback history"

# Create non-login shells by default
set -g default-command "$SHELL -i"

# Extend history limit
set -g history-limit 100000

# First terminal is 1, not 0
set -g base-index 1

# First pane is 1
set-window-option -g pane-base-index 1

# Timeout for pane numbers
set -g display-panes-time 2500

# Use r to reload from tmux.conf
bind r source-file ~/.tmux.conf \; display-message "Configs Reloaded! <leader>-~ to view details"

# From powerline
run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -d' ' -f2)"

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# Use R to renumber windows in the current session
bind R move-window -r \; display-message "Renumbered windows to be gapless"

# Prompt for hostname and create window to it
bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"

# Prompt for a window and join that window to this one
bind-key V choose-window 'join-pane -h -s "%%"'
bind-key @ command-prompt -p "create pane and join from:" "join-pane -h -s ':%%'"

bind-key K command-prompt -p "Name of pane: " "select-pane -T '%%'"

# Prompt for session and attach to it:
bind-key s choose-session

bind P swap-window -t -1 -d
bind N swap-window -t +1 -d

bind-key H command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -e -S -32768 ; save-buffer %1 ; delete-buffer'
bind-key M-H command-prompt -p 'Save history to logs:' -I "~/logs/%Y%m%d-%H%M%Z-#S-#W-#T.history" 'capture-pane -e -S -32768 ; save-buffer %1 ; delete-buffer'

# Switch between the last window quickly
bind-key \; last-window
bind-key \' switch-client -l
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Kill windows/panes
bind X confirm-before -p "kill-window #I? (y/n)" kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"

# Aggressively resize windows so that when multiple clients are connected to the same
# session, the window size will be constrained to the size of the smallest client only
# if both sessions are actively looking at the same window
setw -g aggressive-resize on

# Scroll your way into copy mode (scrollback buffer)
# and select text for copying with the mouse
set -g mouse on

setw -g mode-keys vi
unbind-key h
bind h select-pane -L
unbind-key j
bind j select-pane -D
unbind-key k
bind k select-pane -U
unbind-key l
bind l select-pane -R

bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-selection
bind-key y run-shell -b "tmux show-buffer \| xclip -selection clipboard -i"

set -s set-clipboard on

# Set status background and foreground colours, along with other text settings
source-file "~/.tmux/tmux-dark.conf"

set -g status-position bottom
set -g status-left-length 32
set -g status-right-length 64
set -g status-left "#h:#S â€¢ "
set -g status-right " â€¢ #[fg=default]%a%l:%M%p %Y-%m-%d"
set -g window-status-format " #I:#W:#{=10:pane_title}#F#{?monitor-activity,  ,ðŸ”• }"
set -g window-status-current-format " #I:#W:#{=10:pane_title}#F#{?pane_synchronized,â‡„,}#{?monitor-activity, ,ðŸ”• }"

# Allows vim and other applications to know when it gets focus
set -g focus-events on

# Load any local configuration
if-shell "test -f ~/.tmux.conf.local" "source-file ~/.tmux.conf.local"

set-option -g default-shell $SHELL

set-option -g update-environment "SSH_AUTH_SOCK \
                                  SSH_CONNECTION \
                                  DISPLAY"

# ==============================================
#       Nesting local and remote sessions
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings Â· Issue #237 Â· tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set prefix2 None \;\
    set key-table off \;\
    set status-style fg=color248 \; \
    set status-left-style fg=color248 \; \
    set status-right-style fg=color248 \; \
    set window-status-current-style "fg=color248,bold" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u prefix2 \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u status-left-style \;\
  set -u status-right-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# ==============================================
# tmux Plugins. To install <leader>-I
# ==============================================

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Plugin configuration

# When debugging this, can be useful to have tmux config `set remain-on-exit on`
set -g @urlview-opener 'extract_url {input} | urlview'

# Search Google using 'o' in copy mode
set -g @open-S 'https://www.google.com/search?q='

set -g @resurrect-save 'C-e'
set -g @resurrect-restore 'C-r'
set -g @resurrect-processes 'man mc ranger ssh sudo vim watch python ping nvim'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'

set -g @continuum-restore 'on'

if-shell '[[ $(uname) == "Darwin" && -f ~/.tmux/tmux-Darwin.conf ]]' "source-file ~/.tmux/tmux-Darwin.conf"
if-shell '[[ $(uname) == "Linux" && -f ~/.tmux/tmux-Linux.conf ]]' "source-file ~/.tmux/tmux-Linux.conf"

# Initialise tmux plugin manager
run '~/.tmux/plugins/tpm/tpm'

