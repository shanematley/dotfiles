#!/usr/bin/env bash
# Converts MAC address between colon-hex notation (e.g. 02:29:0a:7f:f4:d0)
# and 48-bit decimal number (e.g. 239332447952)
# Generated by ChatGPT in the pattern of the ip-convert.sh script

mac_to_number() {
    local mac="$1"
    IFS=':' read -r o1 o2 o3 o4 o5 o6 <<< "$mac"

    if [[ -z $o1 || -z $o6 ]]; then
        echo "Invalid MAC address format" >&2
        return 1
    fi

    local number=$(( (16#${o1}) << 40 |
                     (16#${o2}) << 32 |
                     (16#${o3}) << 24 |
                     (16#${o4}) << 16 |
                     (16#${o5}) << 8  |
                     (16#${o6}) ))

    echo "$number"
}

number_to_mac() {
    local num="$1"

    if (( num < 0 || num > 281474976710655 )); then
        echo "Number out of MAC address range (must be <= 281474976710655)" >&2
        return 1
    fi

    printf "%02x:%02x:%02x:%02x:%02x:%02x\n" \
        $(( (num >> 40) & 0xFF )) \
        $(( (num >> 32) & 0xFF )) \
        $(( (num >> 24) & 0xFF )) \
        $(( (num >> 16) & 0xFF )) \
        $(( (num >> 8)  & 0xFF )) \
        $(( num & 0xFF ))
}

is_valid_mac_dotted() {
    [[ "$1" =~ ^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$ ]]
}

is_valid_mac_number() {
    [[ "$1" =~ ^[0-9]+$ ]] && (( $1 >= 0 && $1 <= 281474976710655 ))
}

# Help for Alfred integration
if [[ "$1" == "--alfred" ]]; then
    cat <<OUTEREOF
To use $(basename "$0") in Alfred, create a script filter with "input as {query}"
and the following script content:

result="\$($(readlink -f -- "$0") "{query}")"

if [[ \$? == 0 ]]; then
    cat <<EOF
{
  "items": [
    {
      "title": "MAC is \$result",
      "arg": "\$result"
    }
  ],
  "variables": {
    "original": "{query}",
    "converted": "\$result"
  }
}
EOF
else
    cat <<EOF
{
  "items": [
    {
      "title": "Bad input {query}",
      "subtitle": "\$result"
    }
  ]
}
EOF
fi
OUTEREOF
    exit 0
fi

# Conversion logic
if [[ $# -lt 1 ]]; then
    echo "Usage: $(basename "$0") <MAC address or 48-bit number>" >&2
    exit 1
fi

input="$1"

if is_valid_mac_dotted "$input"; then
    mac_to_number "$input"
elif is_valid_mac_number "$input"; then
    number_to_mac "$input"
else
    echo "Invalid MAC input. Provide a colon-separated hex (e.g. 02:29:0a:7f:f4:d0) or 48-bit number." >&2
    exit 1
fi
